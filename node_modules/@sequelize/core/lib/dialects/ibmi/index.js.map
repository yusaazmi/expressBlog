{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/index.ts"],
  "sourcesContent": ["import type { Sequelize } from '../../sequelize.js';\nimport { createUnspecifiedOrderedBindCollector } from '../../utils/sql';\nimport { AbstractDialect } from '../abstract';\nimport { IBMiConnectionManager } from './connection-manager';\nimport * as DataTypes from './data-types.js';\nimport { IBMiQuery } from './query';\nimport { IBMiQueryGenerator } from './query-generator';\nimport { IBMiQueryInterface } from './query-interface';\n\nexport class IBMiDialect extends AbstractDialect {\n\n  static supports = AbstractDialect.extendSupport(\n    {\n      'VALUES ()': true,\n      'ON DUPLICATE KEY': false,\n      transactions: false,\n      bulkDefault: true,\n      index: {\n        using: false,\n        where: true,\n        functionBased: true,\n        collate: false,\n        include: false,\n      },\n      constraints: {\n        onUpdate: false,\n      },\n      groupedLimit: false,\n      upserts: false,\n      schemas: true,\n      dataTypes: {\n        COLLATE_BINARY: true,\n      },\n      removeColumn: {\n        cascade: true,\n      },\n      renameTable: {\n        changeSchema: false,\n        changeSchemaAndTable: false,\n      },\n      createSchema: {\n        authorization: true,\n      },\n      dropSchema: {\n        cascade: true,\n        ifExists: true,\n      },\n    },\n  );\n\n  readonly connectionManager: IBMiConnectionManager;\n  readonly queryGenerator: IBMiQueryGenerator;\n  readonly queryInterface: IBMiQueryInterface;\n\n  readonly dataTypesDocumentationUrl = 'https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/db2/rbafzch2data.htm';\n  readonly defaultVersion = '7.3.0';\n  readonly Query = IBMiQuery;\n  readonly TICK_CHAR_LEFT = '\"';\n  readonly TICK_CHAR_RIGHT = '\"';\n\n  constructor(sequelize: Sequelize) {\n    console.warn('The IBMi dialect is experimental and usage is at your own risk. Its development is exclusively community-driven and not officially supported by the maintainers.');\n\n    super(sequelize, DataTypes, 'ibmi');\n\n    this.connectionManager = new IBMiConnectionManager(this);\n    this.queryGenerator = new IBMiQueryGenerator(this);\n    this.queryInterface = new IBMiQueryInterface(this);\n  }\n\n  createBindCollector() {\n    return createUnspecifiedOrderedBindCollector();\n  }\n\n  escapeBuffer(buffer: Buffer): string {\n    return `BLOB(X'${buffer.toString('hex')}')`;\n  }\n\n  getDefaultSchema(): string {\n    // TODO: what is the default schema in IBMi?\n    return '';\n  }\n\n  static getDefaultPort() {\n    return 25_000;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,iBAAsD;AACtD,sBAAgC;AAChC,gCAAsC;AACtC,gBAA2B;AAC3B,mBAA0B;AAC1B,6BAAmC;AACnC,6BAAmC;AAE5B,MAAM,oBAAoB,gCAAgB;AAAA,EAE/C,OAAO,WAAW,gCAAgB;AAAA,IAChC;AAAA,MACE,aAAa;AAAA,MACb,oBAAoB;AAAA,MACpB,cAAc;AAAA,MACd,aAAa;AAAA,MACb,OAAO;AAAA,QACL,OAAO;AAAA,QACP,OAAO;AAAA,QACP,eAAe;AAAA,QACf,SAAS;AAAA,QACT,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,UAAU;AAAA,MACZ;AAAA,MACA,cAAc;AAAA,MACd,SAAS;AAAA,MACT,SAAS;AAAA,MACT,WAAW;AAAA,QACT,gBAAgB;AAAA,MAClB;AAAA,MACA,cAAc;AAAA,QACZ,SAAS;AAAA,MACX;AAAA,MACA,aAAa;AAAA,QACX,cAAc;AAAA,QACd,sBAAsB;AAAA,MACxB;AAAA,MACA,cAAc;AAAA,QACZ,eAAe;AAAA,MACjB;AAAA,MACA,YAAY;AAAA,QACV,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA,EAES;AAAA,EACA;AAAA,EACA;AAAA,EAEA,4BAA4B;AAAA,EAC5B,iBAAiB;AAAA,EACjB,QAAQ;AAAA,EACR,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAE3B,YAAY,WAAsB;AAChC,YAAQ,KAAK,kKAAkK;AAE/K,UAAM,WAAW,WAAW,MAAM;AAElC,SAAK,oBAAoB,IAAI,gDAAsB,IAAI;AACvD,SAAK,iBAAiB,IAAI,0CAAmB,IAAI;AACjD,SAAK,iBAAiB,IAAI,0CAAmB,IAAI;AAAA,EACnD;AAAA,EAEA,sBAAsB;AACpB,eAAO,kDAAsC;AAAA,EAC/C;AAAA,EAEA,aAAa,QAAwB;AACnC,WAAO,UAAU,OAAO,SAAS,KAAK;AAAA,EACxC;AAAA,EAEA,mBAA2B;AAEzB,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,iBAAiB;AACtB,WAAO;AAAA,EACT;AACF;",
  "names": []
}
