{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/query-generator-typescript.ts"],
  "sourcesContent": ["import { rejectInvalidOptions } from '../../utils/check';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { generateIndexName } from '../../utils/string';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport {\n  REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n  RENAME_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n  TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n} from '../abstract/query-generator-typescript';\nimport type { RemoveIndexQueryOptions, TableNameOrModel } from '../abstract/query-generator-typescript';\nimport type {\n  ListSchemasQueryOptions,\n  ListTablesQueryOptions,\n  RenameTableQueryOptions,\n  ShowConstraintsQueryOptions,\n  TruncateTableQueryOptions,\n} from '../abstract/query-generator.types';\nimport { IBMiQueryGeneratorInternal } from './query-generator-internal.js';\nimport type { IBMiDialect } from './index.js';\n\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>(['ifExists']);\nconst RENAME_TABLE_QUERY_SUPPORTED_OPTIONS = new Set<keyof RenameTableQueryOptions>();\nconst TRUNCATE_TABLE_QUERY_SUPPORTED_OPTIONS = new Set<keyof TruncateTableQueryOptions>();\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class IBMiQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  readonly #internals: IBMiQueryGeneratorInternal;\n\n  constructor(\n    dialect: IBMiDialect,\n    internals: IBMiQueryGeneratorInternal = new IBMiQueryGeneratorInternal(dialect),\n  ) {\n    super(dialect, internals);\n\n    this.#internals = internals;\n  }\n\n  listSchemasQuery(options?: ListSchemasQueryOptions) {\n    return joinSQLFragments([\n      `SELECT DISTINCT SCHEMA_NAME AS \"schema\" FROM QSYS2.SYSSCHEMAAUTH WHERE GRANTEE = CURRENT USER`,\n      `AND SCHEMA_NAME NOT LIKE 'Q%' AND SCHEMA_NAME NOT LIKE 'SYS%'`,\n      options?.skip && Array.isArray(options.skip) && options.skip.length > 0\n        ? `AND SCHEMA_NAME NOT IN (${options?.skip.map(schema => this.escape(schema)).join(', ')})`\n        : '',\n    ]);\n  }\n\n  describeTableQuery(tableName: TableNameOrModel) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT',\n      'QSYS2.SYSCOLUMNS.*,',\n      'QSYS2.SYSCST.CONSTRAINT_NAME,',\n      'QSYS2.SYSCST.CONSTRAINT_TYPE',\n      'FROM QSYS2.SYSCOLUMNS',\n      'LEFT OUTER JOIN QSYS2.SYSCSTCOL',\n      'ON QSYS2.SYSCOLUMNS.TABLE_SCHEMA = QSYS2.SYSCSTCOL.TABLE_SCHEMA',\n      'AND QSYS2.SYSCOLUMNS.TABLE_NAME = QSYS2.SYSCSTCOL.TABLE_NAME',\n      'AND QSYS2.SYSCOLUMNS.COLUMN_NAME = QSYS2.SYSCSTCOL.COLUMN_NAME',\n      'LEFT JOIN QSYS2.SYSCST',\n      'ON QSYS2.SYSCSTCOL.CONSTRAINT_NAME = QSYS2.SYSCST.CONSTRAINT_NAME',\n      'WHERE QSYS2.SYSCOLUMNS.TABLE_SCHEMA =',\n      table.schema ? this.escape(table.schema) : 'CURRENT SCHEMA',\n      'AND QSYS2.SYSCOLUMNS.TABLE_NAME =',\n      this.escape(table.tableName),\n    ]);\n  }\n\n  listTablesQuery(options?: ListTablesQueryOptions) {\n    return joinSQLFragments([\n      'SELECT TABLE_NAME AS \"tableName\",',\n      'TABLE_SCHEMA AS \"schema\"',\n      `FROM QSYS2.SYSTABLES WHERE TABLE_TYPE = 'T'`,\n      options?.schema\n        ? `AND TABLE_SCHEMA = ${this.escape(options.schema)}`\n        : `AND TABLE_SCHEMA NOT LIKE 'Q%' AND TABLE_SCHEMA NOT LIKE 'SYS%'`,\n      'ORDER BY TABLE_SCHEMA, TABLE_NAME',\n    ]);\n  }\n\n  renameTableQuery(\n    beforeTableName: TableNameOrModel,\n    afterTableName: TableNameOrModel,\n    options?: RenameTableQueryOptions,\n  ): string {\n    if (options) {\n      rejectInvalidOptions(\n        'renameTableQuery',\n        this.dialect.name,\n        RENAME_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n        RENAME_TABLE_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    const beforeTable = this.extractTableDetails(beforeTableName);\n    const afterTable = this.extractTableDetails(afterTableName);\n\n    if (beforeTable.schema !== afterTable.schema) {\n      throw new Error(`Moving tables between schemas is not supported by ${this.dialect.name} dialect.`);\n    }\n\n    return `RENAME TABLE ${this.quoteTable(beforeTableName)} TO ${this.quoteIdentifier(afterTable.tableName)}`;\n  }\n\n  truncateTableQuery(tableName: TableNameOrModel, options?: TruncateTableQueryOptions) {\n    if (options) {\n      rejectInvalidOptions(\n        'truncateTableQuery',\n        this.dialect.name,\n        TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n        TRUNCATE_TABLE_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)} IMMEDIATE`;\n  }\n\n  showConstraintsQuery(tableName: TableNameOrModel, options?: ShowConstraintsQueryOptions) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT c.CONSTRAINT_SCHEMA AS \"constraintSchema\",',\n      'c.CONSTRAINT_NAME AS \"constraintName\",',\n      'c.CONSTRAINT_TYPE AS \"constraintType\",',\n      'c.TABLE_SCHEMA AS \"tableSchema\",',\n      'c.TABLE_NAME AS \"tableName\",',\n      'k.COLUMN_NAME AS \"columnNames\",',\n      'fk.TABLE_SCHEMA AS \"referencedTableSchema\",',\n      'fk.TABLE_NAME AS \"referencedTableName\",',\n      'fk.COLUMN_NAME AS \"referencedColumnNames\",',\n      'r.DELETE_RULE AS \"deleteRule\",',\n      'r.UPDATE_RULE AS \"updateRule\",',\n      'ch.CHECK_CLAUSE AS \"definition\",',\n      'c.IS_DEFERRABLE AS \"isDeferrable\",',\n      'c.INITIALLY_DEFERRED AS \"initiallyDeferred\"',\n      'FROM QSYS2.SYSCST c',\n      'LEFT JOIN QSYS2.SYSREFCST r ON c.CONSTRAINT_NAME = r.CONSTRAINT_NAME AND c.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA',\n      'LEFT JOIN QSYS2.SYSKEYCST k ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.CONSTRAINT_SCHEMA = k.CONSTRAINT_SCHEMA',\n      'LEFT JOIN QSYS2.SYSKEYCST fk ON r.UNIQUE_CONSTRAINT_NAME = k.CONSTRAINT_NAME AND r.UNIQUE_CONSTRAINT_SCHEMA = k.CONSTRAINT_SCHEMA',\n      'LEFT JOIN QSYS2.SYSCHKCST ch ON c.CONSTRAINT_NAME = ch.CONSTRAINT_NAME AND c.CONSTRAINT_SCHEMA = ch.CONSTRAINT_SCHEMA',\n      `WHERE c.TABLE_NAME = ${this.escape(table.tableName)}`,\n      'AND c.TABLE_SCHEMA =',\n      table.schema ? this.escape(table.schema) : 'CURRENT SCHEMA',\n      options?.columnName ? `AND k.COLUMN_NAME = ${this.escape(options.columnName)}` : '',\n      options?.constraintName ? `AND c.CONSTRAINT_NAME = ${this.escape(options.constraintName)}` : '',\n      options?.constraintType ? `AND c.CONSTRAINT_TYPE = ${this.escape(options.constraintType)}` : '',\n      'ORDER BY c.CONSTRAINT_NAME, k.ORDINAL_POSITION, fk.ORDINAL_POSITION',\n    ]);\n  }\n\n  showIndexesQuery(tableName: TableNameOrModel) {\n    const table = this.extractTableDetails(tableName);\n\n    // TODO [+odbc]: check if the query also works when capitalized (for consistency)\n    return joinSQLFragments([\n      'select QSYS2.SYSCSTCOL.CONSTRAINT_NAME as NAME, QSYS2.SYSCSTCOL.COLUMN_NAME, QSYS2.SYSCST.CONSTRAINT_TYPE, QSYS2.SYSCST.TABLE_SCHEMA,',\n      'QSYS2.SYSCST.TABLE_NAME from QSYS2.SYSCSTCOL left outer join QSYS2.SYSCST on QSYS2.SYSCSTCOL.TABLE_SCHEMA = QSYS2.SYSCST.TABLE_SCHEMA and',\n      'QSYS2.SYSCSTCOL.TABLE_NAME = QSYS2.SYSCST.TABLE_NAME and QSYS2.SYSCSTCOL.CONSTRAINT_NAME = QSYS2.SYSCST.CONSTRAINT_NAME where',\n      'QSYS2.SYSCSTCOL.TABLE_SCHEMA =',\n      table.schema ? this.escape(table.schema) : 'CURRENT SCHEMA',\n      `and QSYS2.SYSCSTCOL.TABLE_NAME = ${this.escape(table.tableName)} union select QSYS2.SYSKEYS.INDEX_NAME AS NAME,`,\n      `QSYS2.SYSKEYS.COLUMN_NAME, CAST('INDEX' AS VARCHAR(11)), QSYS2.SYSINDEXES.TABLE_SCHEMA, QSYS2.SYSINDEXES.TABLE_NAME from QSYS2.SYSKEYS`,\n      'left outer join QSYS2.SYSINDEXES on QSYS2.SYSKEYS.INDEX_NAME = QSYS2.SYSINDEXES.INDEX_NAME where QSYS2.SYSINDEXES.TABLE_SCHEMA =',\n      table.schema ? this.escape(table.schema) : 'CURRENT SCHEMA',\n      'and QSYS2.SYSINDEXES.TABLE_NAME =',\n      this.escape(table.tableName),\n    ]);\n  }\n\n  removeIndexQuery(\n    tableName: TableNameOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect.name,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName: string;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return joinSQLFragments([\n      'BEGIN',\n      options?.ifExists ? `IF EXISTS (SELECT * FROM QSYS2.SYSINDEXES WHERE INDEX_NAME = ${this.quoteIdentifier(indexName)}) THEN` : '',\n      `DROP INDEX ${this.quoteIdentifier(indexName)};`,\n      'COMMIT;',\n      options?.ifExists ? 'END IF;' : '',\n      'END',\n    ]);\n  }\n\n  // Version queries\n  versionQuery() {\n    return 'SELECT CONCAT(OS_VERSION, CONCAT(\\'.\\', OS_RELEASE)) AS \"version\" FROM SYSIBMADM.ENV_SYS_INFO';\n  }\n\n  tableExistsQuery(tableName: TableNameOrModel): string {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      `SELECT TABLE_NAME FROM QSYS2.SYSTABLES WHERE TABLE_NAME = ${this.escape(table.tableName)} AND TABLE_SCHEMA = `,\n      table.schema ? this.escape(table.schema) : 'CURRENT SCHEMA',\n    ]);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
