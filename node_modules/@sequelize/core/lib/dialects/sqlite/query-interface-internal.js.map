{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/query-interface-internal.ts"],
  "sourcesContent": ["import { ForeignKeyConstraintError } from '../../errors';\nimport { QueryTypes } from '../../query-types';\nimport type { QueryRawOptions, Sequelize } from '../../sequelize';\nimport { TransactionNestMode } from '../../transaction';\nimport type { TableNameOrModel } from '../abstract/query-generator-typescript';\nimport { AbstractQueryInterfaceInternal } from '../abstract/query-interface-internal';\nimport type { SqliteQueryGenerator } from './query-generator';\nimport type { SqliteColumnsDescription } from './query-interface.types';\nimport { withSqliteForeignKeysOff } from './sqlite-utils';\nimport type { SqliteDialect } from './index.js';\n\nexport class SqliteQueryInterfaceInternal extends AbstractQueryInterfaceInternal {\n  constructor(readonly dialect: SqliteDialect) {\n    super(dialect);\n  }\n\n  get #sequelize(): Sequelize {\n    return this.dialect.sequelize;\n  }\n\n  get #queryGenerator(): SqliteQueryGenerator {\n    return this.dialect.queryGenerator;\n  }\n\n  /**\n   * Alters a table in sqlite.\n   * Workaround for sqlite's limited alter table support.\n   *\n   * @param tableName\n   * @param columns\n   * @param options\n   */\n  async alterTableInternal(\n    tableName: TableNameOrModel,\n    columns: SqliteColumnsDescription,\n    options?: QueryRawOptions,\n  ): Promise<void> {\n    const table = this.#queryGenerator.extractTableDetails(tableName);\n\n    await withSqliteForeignKeysOff(this.#sequelize, options, async () => {\n      await this.#sequelize.transaction({\n        nestMode: TransactionNestMode.savepoint,\n        transaction: options?.transaction,\n      }, async () => {\n        const indexes = await this.#sequelize.queryInterface.showIndex(tableName, options);\n        for (const index of indexes) {\n          // This index is reserved by SQLite, we can't add it through addIndex and must use \"UNIQUE\" on the column definition instead.\n          if (!index.name.startsWith('sqlite_autoindex_')) {\n            continue;\n          }\n\n          if (!index.unique) {\n            continue;\n          }\n\n          for (const field of index.fields) {\n            if (columns[field.attribute]) {\n              columns[field.attribute].unique = true;\n            }\n          }\n        }\n\n        const sql = this.#queryGenerator._replaceTableQuery(tableName, columns);\n        await this.executeQueriesSequentially(sql, { ...options, raw: true });\n\n        // Run a foreign keys integrity check\n        const foreignKeyCheckResult = await this.#sequelize.queryRaw(this.#queryGenerator.foreignKeyCheckQuery(tableName), {\n          ...options,\n          type: QueryTypes.SELECT,\n        });\n\n        if (foreignKeyCheckResult.length > 0) {\n          // There are foreign key violations, exit\n          throw new ForeignKeyConstraintError({\n            message: `Foreign key violations detected: ${JSON.stringify(foreignKeyCheckResult, null, 2)}`,\n            table: table.tableName,\n          });\n        }\n\n        await Promise.all(indexes.map(async index => {\n          // This index is reserved by SQLite, we can't add it through addIndex and must use \"UNIQUE\" on the column definition instead.\n          if (index.name.startsWith('sqlite_autoindex_')) {\n            return;\n          }\n\n          return this.#sequelize.queryInterface.addIndex(tableName, {\n            ...index,\n            type: undefined,\n            fields: index.fields.map(field => field.attribute),\n          });\n        }));\n      });\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA0C;AAC1C,yBAA2B;AAE3B,yBAAoC;AAEpC,sCAA+C;AAG/C,0BAAyC;AAGlC,MAAM,qCAAqC,+DAA+B;AAAA,EAC/E,YAAqB,SAAwB;AAC3C,UAAM,OAAO;AADM;AAAA,EAErB;AAAA,EAEA,IAAI,aAAwB;AAC1B,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAEA,IAAI,kBAAwC;AAC1C,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,mBACJ,WACA,SACA,SACe;AACf,UAAM,QAAQ,KAAK,gBAAgB,oBAAoB,SAAS;AAEhE,cAAM,8CAAyB,KAAK,YAAY,SAAS,YAAY;AACnE,YAAM,KAAK,WAAW,YAAY;AAAA,QAChC,UAAU,uCAAoB;AAAA,QAC9B,aAAa,SAAS;AAAA,MACxB,GAAG,YAAY;AACb,cAAM,UAAU,MAAM,KAAK,WAAW,eAAe,UAAU,WAAW,OAAO;AACjF,mBAAW,SAAS,SAAS;AAE3B,cAAI,CAAC,MAAM,KAAK,WAAW,mBAAmB,GAAG;AAC/C;AAAA,UACF;AAEA,cAAI,CAAC,MAAM,QAAQ;AACjB;AAAA,UACF;AAEA,qBAAW,SAAS,MAAM,QAAQ;AAChC,gBAAI,QAAQ,MAAM,SAAS,GAAG;AAC5B,sBAAQ,MAAM,SAAS,EAAE,SAAS;AAAA,YACpC;AAAA,UACF;AAAA,QACF;AAEA,cAAM,MAAM,KAAK,gBAAgB,mBAAmB,WAAW,OAAO;AACtE,cAAM,KAAK,2BAA2B,KAAK,EAAE,GAAG,SAAS,KAAK,KAAK,CAAC;AAGpE,cAAM,wBAAwB,MAAM,KAAK,WAAW,SAAS,KAAK,gBAAgB,qBAAqB,SAAS,GAAG;AAAA,UACjH,GAAG;AAAA,UACH,MAAM,8BAAW;AAAA,QACnB,CAAC;AAED,YAAI,sBAAsB,SAAS,GAAG;AAEpC,gBAAM,IAAI,wCAA0B;AAAA,YAClC,SAAS,oCAAoC,KAAK,UAAU,uBAAuB,MAAM,CAAC;AAAA,YAC1F,OAAO,MAAM;AAAA,UACf,CAAC;AAAA,QACH;AAEA,cAAM,QAAQ,IAAI,QAAQ,IAAI,OAAM,UAAS;AAE3C,cAAI,MAAM,KAAK,WAAW,mBAAmB,GAAG;AAC9C;AAAA,UACF;AAEA,iBAAO,KAAK,WAAW,eAAe,SAAS,WAAW;AAAA,YACxD,GAAG;AAAA,YACH,MAAM;AAAA,YACN,QAAQ,MAAM,OAAO,IAAI,WAAS,MAAM,SAAS;AAAA,UACnD,CAAC;AAAA,QACH,CAAC,CAAC;AAAA,MACJ,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": []
}
