"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_interface_internal_exports = {};
__export(query_interface_internal_exports, {
  SqliteQueryInterfaceInternal: () => SqliteQueryInterfaceInternal
});
module.exports = __toCommonJS(query_interface_internal_exports);
var import_errors = require("../../errors");
var import_query_types = require("../../query-types");
var import_transaction = require("../../transaction");
var import_query_interface_internal = require("../abstract/query-interface-internal");
var import_sqlite_utils = require("./sqlite-utils");
class SqliteQueryInterfaceInternal extends import_query_interface_internal.AbstractQueryInterfaceInternal {
  constructor(dialect) {
    super(dialect);
    this.dialect = dialect;
  }
  get #sequelize() {
    return this.dialect.sequelize;
  }
  get #queryGenerator() {
    return this.dialect.queryGenerator;
  }
  /**
   * Alters a table in sqlite.
   * Workaround for sqlite's limited alter table support.
   *
   * @param tableName
   * @param columns
   * @param options
   */
  async alterTableInternal(tableName, columns, options) {
    const table = this.#queryGenerator.extractTableDetails(tableName);
    await (0, import_sqlite_utils.withSqliteForeignKeysOff)(this.#sequelize, options, async () => {
      await this.#sequelize.transaction({
        nestMode: import_transaction.TransactionNestMode.savepoint,
        transaction: options?.transaction
      }, async () => {
        const indexes = await this.#sequelize.queryInterface.showIndex(tableName, options);
        for (const index of indexes) {
          if (!index.name.startsWith("sqlite_autoindex_")) {
            continue;
          }
          if (!index.unique) {
            continue;
          }
          for (const field of index.fields) {
            if (columns[field.attribute]) {
              columns[field.attribute].unique = true;
            }
          }
        }
        const sql = this.#queryGenerator._replaceTableQuery(tableName, columns);
        await this.executeQueriesSequentially(sql, { ...options, raw: true });
        const foreignKeyCheckResult = await this.#sequelize.queryRaw(this.#queryGenerator.foreignKeyCheckQuery(tableName), {
          ...options,
          type: import_query_types.QueryTypes.SELECT
        });
        if (foreignKeyCheckResult.length > 0) {
          throw new import_errors.ForeignKeyConstraintError({
            message: `Foreign key violations detected: ${JSON.stringify(foreignKeyCheckResult, null, 2)}`,
            table: table.tableName
          });
        }
        await Promise.all(indexes.map(async (index) => {
          if (index.name.startsWith("sqlite_autoindex_")) {
            return;
          }
          return this.#sequelize.queryInterface.addIndex(tableName, {
            ...index,
            type: void 0,
            fields: index.fields.map((field) => field.attribute)
          });
        }));
      });
    });
  }
}
//# sourceMappingURL=query-interface-internal.js.map
