"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_interface_exports = {};
__export(query_interface_exports, {
  Db2QueryInterface: () => Db2QueryInterface
});
module.exports = __toCommonJS(query_interface_exports);
var import_query_builder_utils = require("../../utils/query-builder-utils");
var import_sql = require("../../utils/sql");
var import_query_interface_typescript = require("./query-interface-typescript");
var import_clone = __toESM(require("lodash/clone"));
var import_intersection = __toESM(require("lodash/intersection"));
var import_isPlainObject = __toESM(require("lodash/isPlainObject"));
var import_mapValues = __toESM(require("lodash/mapValues"));
const { Op } = require("../../operators");
const { QueryTypes } = require("../../query-types");
class Db2QueryInterface extends import_query_interface_typescript.Db2QueryInterfaceTypeScript {
  async upsert(tableName, insertValues, updateValues, where, options) {
    if (options.bind) {
      (0, import_sql.assertNoReservedBind)(options.bind);
    }
    options = { ...options };
    const model = options.model;
    const wheres = [];
    const attributes = Object.keys(insertValues);
    let indexFields;
    options = (0, import_clone.default)(options);
    if (!(0, import_query_builder_utils.isWhereEmpty)(where)) {
      wheres.push(where);
    }
    const indexes = [];
    for (const value of model.getIndexes()) {
      if (value.unique) {
        indexFields = value.fields.map((field) => {
          if ((0, import_isPlainObject.default)(field)) {
            return field.attribute;
          }
          return field;
        });
        indexes.push(indexFields);
      }
    }
    for (const index of indexes) {
      if ((0, import_intersection.default)(attributes, index).length === index.length) {
        where = {};
        for (const field of index) {
          where[field] = insertValues[field];
        }
        wheres.push(where);
      }
    }
    where = { [Op.or]: wheres };
    options.type = QueryTypes.UPSERT;
    options.raw = true;
    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);
    delete options.replacements;
    const result = await this.sequelize.queryRaw(sql, options);
    return [result, void 0];
  }
  // TODO: drop "schema" options from the option bag, it must be passed through tableName instead.
  async createTable(tableName, attributes, options, model) {
    let sql = "";
    options = { ...options };
    if (model) {
      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;
    }
    attributes = (0, import_mapValues.default)(
      attributes,
      (attribute) => this.sequelize.normalizeAttribute(attribute)
    );
    const modelTable = model?.table;
    if (!tableName.schema && (options.schema || modelTable?.schema)) {
      tableName = this.queryGenerator.extractTableDetails(tableName);
      tableName.schema = modelTable?.schema || options.schema || tableName.schema;
    }
    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: "createTable", withoutForeignKeyConstraints: options.withoutForeignKeyConstraints });
    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);
    return await this.sequelize.queryRaw(sql, options);
  }
  async addConstraint(tableName, options) {
    try {
      await super.addConstraint(tableName, options);
    } catch (error) {
      if (!error.cause) {
        throw error;
      }
      if (error.cause.sqlcode !== -668 || error.cause.state !== "57007") {
        throw error;
      }
      await this.executeTableReorg(tableName);
      await super.addConstraint(tableName, options);
    }
  }
  /**
   * DB2 can put tables in the "reorg pending" state after a structure change (e.g. ALTER)
   * Other changes cannot be done to these tables until the reorg has been completed.
   *
   * This method forces a reorg to happen now.
   *
   * @param {TableName} tableName - The name of the table to reorg
   */
  async executeTableReorg(tableName) {
    return await this.sequelize.query(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${this.queryGenerator.quoteTable(tableName)}')`);
  }
}
//# sourceMappingURL=query-interface.js.map
