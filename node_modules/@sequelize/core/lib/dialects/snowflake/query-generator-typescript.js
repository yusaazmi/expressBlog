"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_generator_typescript_exports = {};
__export(query_generator_typescript_exports, {
  SnowflakeQueryGeneratorTypeScript: () => SnowflakeQueryGeneratorTypeScript
});
module.exports = __toCommonJS(query_generator_typescript_exports);
var import_operators = require("../../operators.js");
var import_check = require("../../utils/check");
var import_join_sql_fragments = require("../../utils/join-sql-fragments");
var import_query_generator = require("../abstract/query-generator");
var import_query_generator_typescript = require("../abstract/query-generator-typescript");
var import_query_generator_internal = require("./query-generator-internal.js");
const CREATE_DATABASE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set([]);
const LIST_DATABASES_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set([]);
const SHOW_CONSTRAINTS_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set(["constraintName", "constraintType"]);
const TRUNCATE_TABLE_QUERY_SUPPORTED_OPTIONS = /* @__PURE__ */ new Set();
class SnowflakeQueryGeneratorTypeScript extends import_query_generator.AbstractQueryGenerator {
  #internals;
  constructor(dialect, internals = new import_query_generator_internal.SnowflakeQueryGeneratorInternal(dialect)) {
    super(dialect, internals);
    internals.whereSqlBuilder.setOperatorKeyword(import_operators.Op.regexp, "REGEXP");
    internals.whereSqlBuilder.setOperatorKeyword(import_operators.Op.notRegexp, "NOT REGEXP");
    this.#internals = internals;
  }
  createDatabaseQuery(database, options) {
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "createDatabaseQuery",
        this.dialect.name,
        import_query_generator_typescript.CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS,
        CREATE_DATABASE_QUERY_SUPPORTED_OPTIONS,
        options
      );
    }
    return (0, import_join_sql_fragments.joinSQLFragments)([
      `CREATE DATABASE IF NOT EXISTS ${this.quoteIdentifier(database)}`
    ]);
  }
  listDatabasesQuery(options) {
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "listDatabasesQuery",
        this.dialect.name,
        import_query_generator_typescript.LIST_DATABASES_QUERY_SUPPORTABLE_OPTIONS,
        LIST_DATABASES_QUERY_SUPPORTED_OPTIONS,
        options
      );
    }
    return `SHOW DATABASES`;
  }
  listSchemasQuery(options) {
    let schemasToSkip = this.#internals.getTechnicalSchemaNames();
    if (options && Array.isArray(options?.skip)) {
      schemasToSkip = [...schemasToSkip, ...options.skip];
    }
    return (0, import_join_sql_fragments.joinSQLFragments)([
      'SELECT SCHEMA_NAME AS "schema"',
      "FROM INFORMATION_SCHEMA.SCHEMATA",
      `WHERE SCHEMA_NAME NOT IN (${schemasToSkip.map((schema) => this.escape(schema)).join(", ")})`
    ]);
  }
  describeTableQuery(tableName) {
    return `SHOW FULL COLUMNS FROM ${this.quoteTable(tableName)};`;
  }
  listTablesQuery(options) {
    return (0, import_join_sql_fragments.joinSQLFragments)([
      'SELECT TABLE_NAME AS "tableName",',
      'TABLE_SCHEMA AS "schema"',
      `FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'`,
      options?.schema ? `AND TABLE_SCHEMA = ${this.escape(options.schema)}` : `AND TABLE_SCHEMA NOT IN (${this.#internals.getTechnicalSchemaNames().map((schema) => this.escape(schema)).join(", ")})`,
      "ORDER BY TABLE_SCHEMA, TABLE_NAME"
    ]);
  }
  truncateTableQuery(tableName, options) {
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "truncateTableQuery",
        this.dialect.name,
        import_query_generator_typescript.TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,
        TRUNCATE_TABLE_QUERY_SUPPORTED_OPTIONS,
        options
      );
    }
    return `TRUNCATE ${this.quoteTable(tableName)}`;
  }
  showConstraintsQuery(tableName, options) {
    if (options) {
      (0, import_check.rejectInvalidOptions)(
        "showConstraintsQuery",
        this.dialect.name,
        import_query_generator_typescript.SHOW_CONSTRAINTS_QUERY_SUPPORTABLE_OPTIONS,
        SHOW_CONSTRAINTS_QUERY_SUPPORTED_OPTIONS,
        options
      );
    }
    const table = this.extractTableDetails(tableName);
    return (0, import_join_sql_fragments.joinSQLFragments)([
      "SELECT c.CONSTRAINT_CATALOG AS constraintCatalog,",
      "c.CONSTRAINT_SCHEMA AS constraintSchema,",
      "c.CONSTRAINT_NAME AS constraintName,",
      "c.CONSTRAINT_TYPE AS constraintType,",
      "c.TABLE_CATALOG AS tableCatalog,",
      "c.TABLE_SCHEMA AS tableSchema,",
      "c.TABLE_NAME AS tableName,",
      "fk.TABLE_SCHEMA AS referencedTableSchema,",
      "fk.TABLE_NAME AS referencedTableName,",
      "r.DELETE_RULE AS deleteAction,",
      "r.UPDATE_RULE AS updateAction,",
      "c.IS_DEFERRABLE AS isDeferrable,",
      "c.INITIALLY_DEFERRED AS initiallyDeferred",
      "FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS c",
      "LEFT JOIN INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS r ON c.CONSTRAINT_CATALOG = r.CONSTRAINT_CATALOG AND c.CONSTRAINT_SCHEMA = r.CONSTRAINT_SCHEMA AND c.CONSTRAINT_NAME = r.CONSTRAINT_NAME",
      "LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS fk ON r.UNIQUE_CONSTRAINT_CATALOG = fk.CONSTRAINT_CATALOG AND r.UNIQUE_CONSTRAINT_SCHEMA = fk.CONSTRAINT_SCHEMA AND r.UNIQUE_CONSTRAINT_NAME = fk.CONSTRAINT_NAME",
      `WHERE c.TABLE_NAME = ${this.escape(table.tableName)}`,
      `AND c.TABLE_SCHEMA = ${this.escape(table.schema)}`,
      options?.constraintName ? `AND c.CONSTRAINT_NAME = ${this.escape(options.constraintName)}` : "",
      options?.constraintType ? `AND c.CONSTRAINT_TYPE = ${this.escape(options.constraintType)}` : "",
      "ORDER BY c.CONSTRAINT_NAME"
    ]);
  }
  showIndexesQuery() {
    return `SELECT '' FROM DUAL`;
  }
  versionQuery() {
    return 'SELECT CURRENT_VERSION() AS "version"';
  }
}
//# sourceMappingURL=query-generator-typescript.js.map
