{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/query-generator-typescript.ts"],
  "sourcesContent": ["import NodeUtil from 'node:util';\nimport isObject from 'lodash/isObject';\nimport type { Class } from 'type-fest';\nimport { ConstraintChecking } from '../../deferrable.js';\nimport { AssociationPath } from '../../expression-builders/association-path.js';\nimport { Attribute } from '../../expression-builders/attribute.js';\nimport { BaseSqlExpression } from '../../expression-builders/base-sql-expression.js';\nimport { Cast } from '../../expression-builders/cast.js';\nimport { Col } from '../../expression-builders/col.js';\nimport { DialectAwareFn } from '../../expression-builders/dialect-aware-fn.js';\nimport { Fn } from '../../expression-builders/fn.js';\nimport { Identifier } from '../../expression-builders/identifier.js';\nimport { JsonPath } from '../../expression-builders/json-path.js';\nimport { List } from '../../expression-builders/list.js';\nimport { Literal } from '../../expression-builders/literal.js';\nimport { Value } from '../../expression-builders/value.js';\nimport { Where } from '../../expression-builders/where.js';\nimport { IndexHints } from '../../index-hints.js';\nimport type { Attributes, Model, ModelStatic } from '../../model.js';\nimport { Op } from '../../operators.js';\nimport type { BindOrReplacements, Expression } from '../../sequelize.js';\nimport { bestGuessDataTypeOfVal } from '../../sql-string.js';\nimport { TableHints } from '../../table-hints.js';\nimport { isPlainObject, isString, rejectInvalidOptions } from '../../utils/check.js';\nimport { noOpCol } from '../../utils/deprecations.js';\nimport { quoteIdentifier } from '../../utils/dialect.js';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments.js';\nimport { isModelStatic } from '../../utils/model-utils.js';\nimport { EMPTY_OBJECT } from '../../utils/object.js';\nimport { AbstractDataType } from './data-types.js';\nimport type { BindParamOptions, DataType } from './data-types.js';\nimport { AbstractQueryGeneratorInternal } from './query-generator-internal.js';\nimport type {\n  AddConstraintQueryOptions,\n  BulkDeleteQueryOptions,\n  CreateDatabaseQueryOptions,\n  CreateSchemaQueryOptions,\n  DropSchemaQueryOptions,\n  DropTableQueryOptions,\n  ListDatabasesQueryOptions,\n  ListSchemasQueryOptions,\n  ListTablesQueryOptions,\n  QuoteTableOptions,\n  RemoveColumnQueryOptions,\n  RemoveConstraintQueryOptions,\n  RenameTableQueryOptions,\n  ShowConstraintsQueryOptions,\n  TruncateTableQueryOptions,\n} from './query-generator.types.js';\nimport type { TableName, TableNameWithSchema } from './query-interface.js';\nimport type { WhereOptions } from './where-sql-builder-types.js';\nimport type { WhereSqlBuilder } from './where-sql-builder.js';\nimport { PojoWhere } from './where-sql-builder.js';\nimport type { AbstractDialect } from './index.js';\n\nexport type TableNameOrModel = TableName | ModelStatic;\n\n// keep REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS updated when modifying this\nexport interface RemoveIndexQueryOptions {\n  concurrently?: boolean;\n  ifExists?: boolean;\n  cascade?: boolean;\n}\n\nexport const CREATE_DATABASE_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof CreateDatabaseQueryOptions>(['charset', 'collate', 'ctype', 'encoding', 'template']);\nexport const CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof CreateSchemaQueryOptions>(['authorization', 'charset', 'collate', 'comment', 'ifNotExists', 'replace']);\nexport const DROP_SCHEMA_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof DropSchemaQueryOptions>(['cascade', 'ifExists']);\nexport const DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof DropTableQueryOptions>(['cascade']);\nexport const LIST_DATABASES_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof ListDatabasesQueryOptions>(['skip']);\nexport const LIST_TABLES_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof ListTablesQueryOptions>(['schema']);\nexport const QUOTE_TABLE_SUPPORTABLE_OPTIONS = new Set<keyof QuoteTableOptions>(['indexHints', 'tableHints']);\nexport const REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof RemoveColumnQueryOptions>(['ifExists', 'cascade']);\nexport const REMOVE_CONSTRAINT_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof RemoveConstraintQueryOptions>(['ifExists', 'cascade']);\nexport const REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof RemoveIndexQueryOptions>(['concurrently', 'ifExists', 'cascade']);\nexport const RENAME_TABLE_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof RenameTableQueryOptions>(['changeSchema']);\nexport const SHOW_CONSTRAINTS_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof ShowConstraintsQueryOptions>(['columnName', 'constraintName', 'constraintType']);\nexport const TRUNCATE_TABLE_QUERY_SUPPORTABLE_OPTIONS = new Set<keyof TruncateTableQueryOptions>(['cascade', 'restartIdentity']);\n\n/**\n * Options accepted by {@link AbstractQueryGeneratorTypeScript#escape}\n */\nexport interface EscapeOptions extends FormatWhereOptions {\n  readonly type?: DataType | undefined;\n}\n\nexport interface FormatWhereOptions extends Bindable {\n  /**\n   * These are used to inline replacements into the query, when one is found inside of a {@link Literal}.\n   */\n  readonly replacements?: BindOrReplacements | undefined;\n\n  /**\n   * The model of the main alias. Used to determine the type & column name of attributes referenced in the where clause.\n   */\n  readonly model?: ModelStatic | undefined;\n\n  /**\n   * The alias of the main table corresponding to {@link FormatWhereOptions.model}.\n   * Used as the prefix for attributes that do not reference an association, e.g.\n   *\n   * ```ts\n   * const where = { name: 'foo' };\n   * ```\n   *\n   * will produce\n   *\n   * ```sql\n   * WHERE \"<mainAlias>\".\"name\" = 'foo'\n   * ```\n   */\n  readonly mainAlias?: string | undefined;\n}\n\n/**\n * Methods that support this option are functions that add values to the query.\n * If {@link Bindable.bindParam} is specified, the value will be added to the query as a bind parameter.\n * If it is not specified, the value will be added to the query as a literal.\n */\nexport interface Bindable {\n  bindParam?: ((value: unknown) => string) | undefined;\n}\n\n// DO NOT MAKE THIS CLASS PUBLIC!\n/**\n * This is a temporary class used to progressively migrate the AbstractQueryGenerator class to TypeScript by slowly moving its functions here.\n * Always use {@link AbstractQueryGenerator} instead.\n */\nexport class AbstractQueryGeneratorTypeScript {\n  readonly dialect: AbstractDialect;\n  readonly #internals: AbstractQueryGeneratorInternal;\n\n  constructor(\n    dialect: AbstractDialect,\n    internals: AbstractQueryGeneratorInternal = new AbstractQueryGeneratorInternal(dialect),\n  ) {\n    this.dialect = dialect;\n    this.#internals = internals;\n  }\n\n  get #whereGenerator(): WhereSqlBuilder {\n    return this.#internals.whereSqlBuilder;\n  }\n\n  protected get sequelize() {\n    return this.dialect.sequelize;\n  }\n\n  protected get options() {\n    return this.sequelize.options;\n  }\n\n  createDatabaseQuery(_database: string, _options?: CreateDatabaseQueryOptions): string {\n    if (this.dialect.supports.multiDatabases) {\n      throw new Error(`${this.dialect.name} declares supporting databases but createDatabaseQuery is not implemented.`);\n    }\n\n    throw new Error(`Databases are not supported in ${this.dialect.name}.`);\n  }\n\n  dropDatabaseQuery(database: string): string {\n    if (this.dialect.supports.multiDatabases) {\n      return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(database)}`;\n    }\n\n    throw new Error(`Databases are not supported in ${this.dialect.name}.`);\n  }\n\n  listDatabasesQuery(_options?: ListDatabasesQueryOptions): string {\n    if (this.dialect.supports.multiDatabases) {\n      throw new Error(`${this.dialect.name} declares supporting databases but listDatabasesQuery is not implemented.`);\n    }\n\n    throw new Error(`Databases are not supported in ${this.dialect.name}.`);\n  }\n\n  createSchemaQuery(schemaName: string, options?: CreateSchemaQueryOptions): string {\n    if (!this.dialect.supports.schemas) {\n      throw new Error(`Schemas are not supported in ${this.dialect.name}.`);\n    }\n\n    if (options) {\n      const CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS = new Set<keyof CreateSchemaQueryOptions>();\n      if (this.dialect.supports.createSchema.authorization) {\n        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS.add('authorization');\n      }\n\n      if (this.dialect.supports.createSchema.charset) {\n        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS.add('charset');\n      }\n\n      if (this.dialect.supports.createSchema.collate) {\n        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS.add('collate');\n      }\n\n      if (this.dialect.supports.createSchema.comment) {\n        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS.add('comment');\n      }\n\n      if (this.dialect.supports.createSchema.ifNotExists) {\n        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS.add('ifNotExists');\n      }\n\n      if (this.dialect.supports.createSchema.replace) {\n        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS.add('replace');\n      }\n\n      rejectInvalidOptions(\n        'createSchemaQuery',\n        this.dialect.name,\n        CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,\n        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'CREATE',\n      options?.replace ? 'OR REPLACE' : '',\n      'SCHEMA',\n      options?.ifNotExists ? 'IF NOT EXISTS' : '',\n      this.quoteIdentifier(schemaName),\n      options?.authorization\n        ? `AUTHORIZATION ${options.authorization instanceof Literal ? this.#internals.formatLiteral(options.authorization) : this.quoteIdentifier(options.authorization)}`\n        : '',\n      options?.charset ? `DEFAULT CHARACTER SET ${this.escape(options.charset)}` : '',\n      options?.collate ? `DEFAULT COLLATE ${this.escape(options.collate)}` : '',\n      options?.comment ? `COMMENT ${this.escape(options.comment)}` : '',\n    ]);\n  }\n\n  dropSchemaQuery(schemaName: string, options?: DropSchemaQueryOptions): string {\n    if (!this.dialect.supports.schemas) {\n      throw new Error(`Schemas are not supported in ${this.dialect.name}.`);\n    }\n\n    if (options) {\n      const DROP_SCHEMA_QUERY_SUPPORTED_OPTIONS = new Set<keyof DropSchemaQueryOptions>();\n      if (this.dialect.supports.dropSchema.cascade) {\n        DROP_SCHEMA_QUERY_SUPPORTED_OPTIONS.add('cascade');\n      }\n\n      if (this.dialect.supports.dropSchema.ifExists) {\n        DROP_SCHEMA_QUERY_SUPPORTED_OPTIONS.add('ifExists');\n      }\n\n      rejectInvalidOptions(\n        'dropSchemaQuery',\n        this.dialect.name,\n        DROP_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,\n        DROP_SCHEMA_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'DROP SCHEMA',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(schemaName),\n      options?.cascade ? 'CASCADE' : '',\n    ]);\n  }\n\n  listSchemasQuery(_options?: ListSchemasQueryOptions): string {\n    if (this.dialect.supports.schemas) {\n      throw new Error(`${this.dialect.name} declares supporting schema but listSchemasQuery is not implemented.`);\n    }\n\n    throw new Error(`Schemas are not supported in ${this.dialect.name}.`);\n  }\n\n  describeTableQuery(tableName: TableNameOrModel) {\n    return `DESCRIBE ${this.quoteTable(tableName)};`;\n  }\n\n  dropTableQuery(tableName: TableNameOrModel, options?: DropTableQueryOptions): string {\n    const DROP_TABLE_QUERY_SUPPORTED_OPTIONS = new Set<keyof DropTableQueryOptions>();\n\n    if (this.dialect.supports.dropTable.cascade) {\n      DROP_TABLE_QUERY_SUPPORTED_OPTIONS.add('cascade');\n    }\n\n    if (options) {\n      rejectInvalidOptions(\n        'dropTableQuery',\n        this.dialect.name,\n        DROP_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n        DROP_TABLE_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'DROP TABLE IF EXISTS',\n      this.quoteTable(tableName),\n      options?.cascade ? 'CASCADE' : '',\n    ]);\n  }\n\n  listTablesQuery(_options?: ListTablesQueryOptions): string {\n    throw new Error(`listTablesQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  renameTableQuery(\n    beforeTableName: TableNameOrModel,\n    afterTableName: TableNameOrModel,\n    options?: RenameTableQueryOptions,\n  ): string {\n    const beforeTable = this.extractTableDetails(beforeTableName);\n    const afterTable = this.extractTableDetails(afterTableName);\n\n    if (beforeTable.schema !== afterTable.schema && !options?.changeSchema) {\n      throw new Error('To move a table between schemas, you must set `options.changeSchema` to true.');\n    }\n\n    return `ALTER TABLE ${this.quoteTable(beforeTableName)} RENAME TO ${this.quoteTable(afterTableName)}`;\n  }\n\n  truncateTableQuery(_tableName: TableNameOrModel, _options?: TruncateTableQueryOptions): string | string[] {\n    throw new Error(`truncateTableQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  removeColumnQuery(tableName: TableNameOrModel, columnName: string, options?: RemoveColumnQueryOptions): string {\n    if (options) {\n      const REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveColumnQueryOptions>();\n\n      if (this.dialect.supports.removeColumn.cascade) {\n        REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS.add('cascade');\n      }\n\n      if (this.dialect.supports.removeColumn.ifExists) {\n        REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS.add('ifExists');\n      }\n\n      rejectInvalidOptions(\n        'removeColumnQuery',\n        this.dialect.name,\n        REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP COLUMN',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(columnName),\n      options?.cascade ? 'CASCADE' : '',\n    ]);\n  }\n\n  addConstraintQuery(tableName: TableNameOrModel, options: AddConstraintQueryOptions): string {\n    if (!this.dialect.supports.constraints.add) {\n      throw new Error(`Add constraint queries are not supported by ${this.dialect.name} dialect`);\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'ADD',\n      this.#internals.getConstraintSnippet(tableName, options),\n    ]);\n  }\n\n  removeConstraintQuery(tableName: TableNameOrModel, constraintName: string, options?: RemoveConstraintQueryOptions) {\n    if (!this.dialect.supports.constraints.remove) {\n      throw new Error(`Remove constraint queries are not supported by ${this.dialect.name} dialect`);\n    }\n\n    if (options) {\n      const REMOVE_CONSTRAINT_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveConstraintQueryOptions>();\n      const { removeOptions } = this.dialect.supports.constraints;\n      if (removeOptions.cascade) {\n        REMOVE_CONSTRAINT_QUERY_SUPPORTED_OPTIONS.add('cascade');\n      }\n\n      if (removeOptions.ifExists) {\n        REMOVE_CONSTRAINT_QUERY_SUPPORTED_OPTIONS.add('ifExists');\n      }\n\n      rejectInvalidOptions(\n        'removeConstraintQuery',\n        this.dialect.name,\n        REMOVE_CONSTRAINT_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_CONSTRAINT_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return joinSQLFragments([\n      'ALTER TABLE',\n      this.quoteTable(tableName),\n      'DROP CONSTRAINT',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(constraintName),\n      options?.cascade ? 'CASCADE' : '',\n    ]);\n  }\n\n  setConstraintCheckingQuery(type: ConstraintChecking): string;\n  setConstraintCheckingQuery(type: Class<ConstraintChecking>, constraints?: readonly string[]): string;\n  setConstraintCheckingQuery(type: ConstraintChecking | Class<ConstraintChecking>, constraints?: readonly string[]) {\n    if (!this.dialect.supports.constraints.deferrable) {\n      throw new Error(`Deferrable constraints are not supported by ${this.dialect.name} dialect`);\n    }\n\n    let constraintFragment = 'ALL';\n    if (type instanceof ConstraintChecking) {\n      if (type.constraints?.length) {\n        constraintFragment = type.constraints.map(constraint => this.quoteIdentifier(constraint)).join(', ');\n      }\n\n      return `SET CONSTRAINTS ${constraintFragment} ${type.toString()}`;\n    }\n\n    if (constraints?.length) {\n      constraintFragment = constraints.map(constraint => this.quoteIdentifier(constraint)).join(', ');\n    }\n\n    return `SET CONSTRAINTS ${constraintFragment} ${type.toString()}`;\n  }\n\n  showConstraintsQuery(_tableName: TableNameOrModel, _options?: ShowConstraintsQueryOptions): string {\n    throw new Error(`showConstraintsQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  showIndexesQuery(_tableName: TableNameOrModel): string {\n    throw new Error(`showIndexesQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  removeIndexQuery(\n    _tableName: TableNameOrModel,\n    _indexNameOrAttributes: string | string [],\n    _options?: RemoveIndexQueryOptions,\n  ): string {\n    throw new Error(`removeIndexQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table or the foreign key constraint of a given column.\n   *\n   * @deprecated Use {@link showConstraintsQuery} instead.\n   * @param _tableName The table or associated model.\n   * @param _columnName The name of the column. Not supported by SQLite.\n   * @returns The generated SQL query.\n   */\n  getForeignKeyQuery(_tableName: TableNameOrModel, _columnName?: string): Error {\n    throw new Error(`getForeignKeyQuery has been deprecated. Use showConstraintsQuery instead.`);\n  }\n\n  /**\n   * Generates an SQL query that drops a foreign key constraint.\n   *\n   * @deprecated Use {@link removeConstraintQuery} instead.\n   * @param _tableName The table or associated model.\n   * @param _foreignKey The name of the foreign key constraint.\n   */\n  dropForeignKeyQuery(_tableName: TableNameOrModel, _foreignKey: string): Error {\n    throw new Error(`dropForeignKeyQuery has been deprecated. Use removeConstraintQuery instead.`);\n  }\n\n  // TODO: rename to \"normalizeTable\" & move to sequelize class\n  extractTableDetails(\n    tableNameOrModel: TableNameOrModel,\n    options?: { schema?: string, delimiter?: string },\n  ): TableNameWithSchema {\n    const tableNameObject = isModelStatic(tableNameOrModel) ? tableNameOrModel.getTableName()\n      : isString(tableNameOrModel) ? { tableName: tableNameOrModel }\n      : tableNameOrModel;\n\n    if (!isPlainObject(tableNameObject)) {\n      throw new Error(`Invalid input received, got ${NodeUtil.inspect(tableNameOrModel)}, expected a Model Class, a TableNameWithSchema object, or a table name string`);\n    }\n\n    // @ts-expect-error -- TODO: this is added by getTableName on model, and must be removed\n    delete tableNameObject.toString;\n\n    return {\n      ...tableNameObject,\n      schema: options?.schema || tableNameObject.schema || this.options.schema || this.dialect.getDefaultSchema(),\n      delimiter: options?.delimiter || tableNameObject.delimiter || '.',\n    };\n  }\n\n  /**\n   * Quote table name with optional alias and schema attribution\n   *\n   * @param param table string or object\n   * @param options options\n   */\n  quoteTable(param: TableNameOrModel, options?: QuoteTableOptions): string {\n    const QUOTE_TABLE_SUPPORTED_OPTIONS = new Set<keyof QuoteTableOptions>();\n    if (this.dialect.supports.indexHints) {\n      QUOTE_TABLE_SUPPORTED_OPTIONS.add('indexHints');\n    }\n\n    if (this.dialect.supports.tableHints) {\n      QUOTE_TABLE_SUPPORTED_OPTIONS.add('tableHints');\n    }\n\n    rejectInvalidOptions('quoteTable', this.dialect.name, QUOTE_TABLE_SUPPORTABLE_OPTIONS, QUOTE_TABLE_SUPPORTED_OPTIONS, { ...options });\n\n    if (isModelStatic(param)) {\n      param = param.getTableName();\n    }\n\n    const tableName = this.extractTableDetails(param);\n\n    if (isObject(param) && ('as' in param || 'name' in param)) {\n      throw new Error('parameters \"as\" and \"name\" are not allowed in the first parameter of quoteTable, pass them as the second parameter.');\n    }\n\n    let sql = '';\n\n    if (this.dialect.supports.schemas) {\n      // Some users sync the same set of tables in different schemas for various reasons\n      // They then set `searchPath` when running a query to use different schemas.\n      // See https://github.com/sequelize/sequelize/pull/15274#discussion_r1020770364\n      // For this reason, we treat the default schema as equivalent to \"no schema specified\"\n      if (tableName.schema && tableName.schema !== this.dialect.getDefaultSchema()) {\n        sql += `${this.quoteIdentifier(tableName.schema)}.`;\n      }\n\n      sql += this.quoteIdentifier(tableName.tableName);\n    } else {\n      const fakeSchemaPrefix = (tableName.schema && tableName.schema !== this.dialect.getDefaultSchema())\n        ? tableName.schema + (tableName.delimiter || '.')\n        : '';\n\n      sql += this.quoteIdentifier(fakeSchemaPrefix + tableName.tableName);\n    }\n\n    if (options?.alias) {\n      sql += ` AS ${this.quoteIdentifier(options.alias === true ? tableName.tableName : options.alias)}`;\n    }\n\n    if (options?.indexHints) {\n      for (const hint of options.indexHints) {\n        if (IndexHints[hint.type]) {\n          sql += ` ${IndexHints[hint.type]} INDEX (${hint.values.map(indexName => this.quoteIdentifier(indexName)).join(',')})`;\n        } else {\n          throw new Error(`The index hint type \"${hint.type}\" is invalid or not supported by dialect \"${this.dialect.name}\".`);\n        }\n      }\n    }\n\n    if (options?.tableHints) {\n      const hints: TableHints[] = [];\n      for (const hint of options.tableHints) {\n        if (TableHints[hint]) {\n          hints.push(TableHints[hint]);\n        } else {\n          throw new Error(`The table hint \"${hint}\" is invalid or not supported by dialect \"${this.dialect.name}\".`);\n        }\n      }\n\n      if (hints.length) {\n        sql += ` WITH (${hints.join(', ')})`;\n      }\n    }\n\n    return sql;\n  }\n\n  /**\n   * Adds quotes to identifier\n   *\n   * @param identifier\n   * @param _force\n   */\n  // TODO: memoize last result\n  quoteIdentifier(identifier: string, _force?: boolean) {\n    return quoteIdentifier(identifier, this.dialect.TICK_CHAR_LEFT, this.dialect.TICK_CHAR_RIGHT);\n  }\n\n  isSameTable(tableA: TableNameOrModel, tableB: TableNameOrModel) {\n    if (tableA === tableB) {\n      return true;\n    }\n\n    tableA = this.extractTableDetails(tableA);\n    tableB = this.extractTableDetails(tableB);\n\n    return tableA.tableName === tableB.tableName && tableA.schema === tableB.schema;\n  }\n\n  whereQuery<M extends Model>(where: WhereOptions<Attributes<M>>, options?: FormatWhereOptions) {\n    const query = this.whereItemsQuery(where, options);\n    if (query && query.length > 0) {\n      return `WHERE ${query}`;\n    }\n\n    return '';\n  }\n\n  whereItemsQuery<M extends Model>(where: WhereOptions<Attributes<M>> | undefined, options?: FormatWhereOptions) {\n    return this.#whereGenerator.formatWhereOptions(where, options);\n  }\n\n  formatSqlExpression(piece: BaseSqlExpression, options?: EscapeOptions): string {\n    if (piece instanceof Literal) {\n      return this.#internals.formatLiteral(piece, options);\n    }\n\n    if (piece instanceof Fn) {\n      return this.#internals.formatFn(piece, options);\n    }\n\n    if (piece instanceof List) {\n      return this.escapeList(piece.values, options);\n    }\n\n    if (piece instanceof Value) {\n      return this.escape(piece.value, options);\n    }\n\n    if (piece instanceof Identifier) {\n      return this.quoteIdentifier(piece.value);\n    }\n\n    if (piece instanceof Cast) {\n      return this.#internals.formatCast(piece, options);\n    }\n\n    if (piece instanceof Col) {\n      return this.#internals.formatCol(piece, options);\n    }\n\n    if (piece instanceof Attribute) {\n      return this.#internals.formatAttribute(piece, options);\n    }\n\n    if (piece instanceof Where) {\n      if (piece.where instanceof PojoWhere) {\n        return this.#whereGenerator.formatPojoWhere(piece.where, options);\n      }\n\n      return this.#whereGenerator.formatWhereOptions(piece.where, options);\n    }\n\n    if (piece instanceof JsonPath) {\n      return this.#internals.formatJsonPath(piece, options);\n    }\n\n    if (piece instanceof AssociationPath) {\n      return this.#internals.formatAssociationPath(piece);\n    }\n\n    if (piece instanceof DialectAwareFn) {\n      return this.#internals.formatDialectAwareFn(piece, options);\n    }\n\n    throw new Error(`Unknown sequelize method ${piece.constructor.name}`);\n  }\n\n  /**\n   * The goal of this method is to execute the equivalent of json_unquote for the current dialect.\n   *\n   * @param _arg\n   * @param _options\n   */\n  formatUnquoteJson(_arg: Expression, _options: EscapeOptions | undefined): string {\n    if (!this.dialect.supports.jsonOperations) {\n      throw new Error(`Unquoting JSON is not supported by ${this.dialect.name} dialect.`);\n    }\n\n    throw new Error(`formatUnquoteJson has not been implemented in ${this.dialect.name}.`);\n  }\n\n  /**\n   * @param _sqlExpression \u26A0\uFE0F This is not an identifier, it's a raw SQL expression. It will be inlined in the query.\n   * @param _path The JSON path, where each item is one level of the path\n   * @param _unquote Whether the result should be unquoted (depending on dialect: ->> and #>> operators, json_unquote function). Defaults to `false`.\n   */\n  jsonPathExtractionQuery(_sqlExpression: string, _path: ReadonlyArray<number | string>, _unquote: boolean): string {\n    if (!this.dialect.supports.jsonOperations) {\n      throw new Error(`JSON Paths are not supported in ${this.dialect.name}.`);\n    }\n\n    throw new Error(`jsonPathExtractionQuery has not been implemented in ${this.dialect.name}.`);\n  }\n\n  /**\n   * Escapes a value (e.g. a string, number or date) as an SQL value (as opposed to an identifier).\n   *\n   * @param value The value to escape\n   * @param options The options to use when escaping the value\n   */\n  escape(value: unknown, options: EscapeOptions = EMPTY_OBJECT): string {\n    if (isPlainObject(value) && Op.col in value) {\n      noOpCol();\n      value = new Col(value[Op.col] as string);\n    }\n\n    if (value instanceof BaseSqlExpression) {\n      return this.formatSqlExpression(value, options);\n    }\n\n    if (value === undefined) {\n      throw new TypeError('\"undefined\" cannot be escaped');\n    }\n\n    let { type } = options;\n    if (type != null) {\n      type = this.sequelize.normalizeDataType(type);\n    }\n\n    if (\n      value === null\n      // we handle null values ourselves by default, unless the data type explicitly accepts null\n      && (!(type instanceof AbstractDataType) || !type.acceptsNull())\n    ) {\n      if (options.bindParam) {\n        return options.bindParam(null);\n      }\n\n      return 'NULL';\n    }\n\n    if (type == null || typeof type === 'string') {\n      type = bestGuessDataTypeOfVal(value, this.dialect);\n    } else {\n      type = this.sequelize.normalizeDataType(type);\n    }\n\n    this.sequelize.validateValue(value, type);\n\n    if (options.bindParam) {\n      return type.getBindParamSql(value, options as BindParamOptions);\n    }\n\n    return type.escape(value);\n  }\n\n  /**\n   * Escapes an array of values (e.g. strings, numbers or dates) as an SQL List of values.\n   *\n   * @param values The list of values to escape\n   * @param options\n   *\n   * @example\n   * ```ts\n   * const values = [1, 2, 3];\n   * queryGenerator.escapeList([1, 2, 3]); // '(1, 2, 3)'\n   */\n  escapeList(values: unknown[], options?: EscapeOptions): string {\n    return `(${values.map(value => this.escape(value, options)).join(', ')})`;\n  }\n\n  getUuidV1FunctionCall(): string {\n    if (!this.dialect.supports.uuidV1Generation) {\n      throw new Error(`UUID V1 generation is not supported by ${this.dialect.name} dialect.`);\n    }\n\n    throw new Error(`getUuidV1FunctionCall has not been implemented in ${this.dialect.name}.`);\n  }\n\n  getUuidV4FunctionCall(): string {\n    if (!this.dialect.supports.uuidV4Generation) {\n      throw new Error(`UUID V4 generation is not supported by ${this.dialect.name} dialect.`);\n    }\n\n    throw new Error(`getUuidV4FunctionCall has not been implemented in ${this.dialect.name}.`);\n  }\n\n  getToggleForeignKeyChecksQuery(_enable: boolean): string {\n    throw new Error(`${this.dialect.name} does not support toggling foreign key checks`);\n  }\n\n  versionQuery(): string {\n    throw new Error(`${this.dialect.name} did not implement versionQuery`);\n  }\n\n  tableExistsQuery(tableName: TableNameOrModel): string {\n    const table = this.extractTableDetails(tableName);\n\n    return `SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME = ${this.escape(table.tableName)} AND TABLE_SCHEMA = ${this.escape(table.schema)}`;\n  }\n\n  bulkDeleteQuery(tableName: TableNameOrModel, options: BulkDeleteQueryOptions): string {\n    const table = this.quoteTable(tableName);\n    const whereOptions = isModelStatic(tableName) ? { ...options, model: tableName } : options;\n\n    if (options.limit && this.dialect.supports.delete.modelWithLimit) {\n      if (!isModelStatic(tableName)) {\n        throw new Error('Cannot use LIMIT with bulkDeleteQuery without a model.');\n      }\n\n      const pks = Object.values(tableName.primaryKeys).map(key => this.quoteIdentifier(key.columnName)).join(', ');\n      const primaryKeys = Object.values(tableName.primaryKeys).length > 1 ? `(${pks})` : pks;\n\n      return joinSQLFragments([\n        `DELETE FROM ${table} WHERE ${primaryKeys} IN (`,\n        `SELECT ${pks} FROM ${table}`,\n        options.where ? this.whereQuery(options.where, whereOptions) : '',\n        `ORDER BY ${pks}`,\n        this.#internals.addLimitAndOffset(options),\n        ')',\n      ]);\n    }\n\n    return joinSQLFragments([\n      `DELETE FROM ${this.quoteTable(tableName)}`,\n      options.where ? this.whereQuery(options.where, whereOptions) : '',\n      this.#internals.addLimitAndOffset(options),\n    ]);\n  }\n\n  __TEST__getInternals() {\n    if (process.env.npm_lifecycle_event !== 'mocha') {\n      throw new Error('You can only access the internals of the query generator in test mode.');\n    }\n\n    return this.#internals;\n  }\n}\n"],
  "mappings": "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",
  "names": ["NodeUtil", "isObject"]
}
