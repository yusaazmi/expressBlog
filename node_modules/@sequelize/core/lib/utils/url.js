"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var url_exports = {};
__export(url_exports, {
  parseConnectionString: () => parseConnectionString
});
module.exports = __toCommonJS(url_exports);
var import_node_path = __toESM(require("node:path"));
var import_node_url = require("node:url");
var import_pg_connection_string = __toESM(require("pg-connection-string"));
var import_sequelize_typescript = require("../sequelize-typescript");
var import_deprecations = require("./deprecations");
function parseConnectionString(connectionString) {
  const options = {};
  if (connectionString === "sqlite://:memory:" || connectionString === "sqlite::memory:") {
    options.dialect = "sqlite";
    options.storage = ":memory:";
    return options;
  }
  const urlObject = new import_node_url.URL(connectionString);
  if (urlObject.protocol) {
    let protocol = urlObject.protocol.replace(/:$/, "");
    if (protocol === "postgresql") {
      protocol = "postgres";
    }
    if (!import_sequelize_typescript.SUPPORTED_DIALECTS.includes(protocol)) {
      throw new Error(`The protocol was set to ${JSON.stringify(protocol)}, which is not a supported dialect. Set it to one of ${import_sequelize_typescript.SUPPORTED_DIALECTS.map((d) => JSON.stringify(d)).join(", ")} instead.`);
    }
    options.dialect = protocol;
  }
  if (urlObject.hostname != null) {
    options.host = decodeURIComponent(urlObject.hostname);
  }
  if (urlObject.pathname) {
    options.database = decodeURIComponent(urlObject.pathname.replace(/^\//, ""));
  }
  if (urlObject.port) {
    options.port = urlObject.port;
  }
  if (urlObject.username) {
    options.username = decodeURIComponent(urlObject.username);
  }
  if (urlObject.password) {
    options.password = decodeURIComponent(urlObject.password);
  }
  if (urlObject.searchParams) {
    if (urlObject.searchParams.has("host")) {
      (0, import_deprecations.encodeHost)();
      options.host = decodeURIComponent(urlObject.searchParams.get("host"));
    }
    if (options.dialect === "sqlite" && urlObject.pathname) {
      const storagePath = import_node_path.default.join(options.host, urlObject.pathname);
      delete options.host;
      options.storage = import_node_path.default.resolve(options.storage || storagePath);
    }
    options.dialectOptions = Object.fromEntries(urlObject.searchParams.entries());
    if (urlObject.searchParams.has("options")) {
      try {
        const o = JSON.parse(urlObject.searchParams.get("options"));
        options.dialectOptions.options = o;
      } catch {
      }
    }
  }
  if (options.dialect === "postgres") {
    const parseResult = import_pg_connection_string.default.parse(connectionString);
    delete parseResult.database;
    delete parseResult.password;
    delete parseResult.user;
    delete parseResult.host;
    delete parseResult.port;
    delete parseResult.options;
    options.dialectOptions ||= /* @__PURE__ */ Object.create(null);
    Object.assign(options.dialectOptions, parseResult);
  }
  return options;
}
//# sourceMappingURL=url.js.map
