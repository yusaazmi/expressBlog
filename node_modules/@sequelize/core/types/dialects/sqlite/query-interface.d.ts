import type { AttributeOptions } from '../../model';
import type { QueryRawOptions } from '../../sequelize';
import type { DataType } from '../abstract/data-types';
import type { TableNameOrModel } from '../abstract/query-generator-typescript';
import { AbstractQueryInterface } from '../abstract/query-interface';
import type { AddConstraintOptions, ConstraintDescription, DescribeTableOptions, QiDropAllTablesOptions, RemoveColumnOptions, RemoveConstraintOptions, ShowConstraintsOptions } from '../abstract/query-interface.types';
import { SqliteQueryInterfaceInternal } from './query-interface-internal';
import type { SqliteColumnsDescription } from './query-interface.types';
import type { SqliteDialect } from './index.js';
export declare class SqliteQueryInterface<Dialect extends SqliteDialect = SqliteDialect> extends AbstractQueryInterface<Dialect> {
    #private;
    constructor(dialect: Dialect, internalQueryInterface?: SqliteQueryInterfaceInternal);
    dropAllTables(options?: QiDropAllTablesOptions): Promise<void>;
    describeTable(tableName: TableNameOrModel, options?: DescribeTableOptions): Promise<SqliteColumnsDescription>;
    addConstraint(tableName: TableNameOrModel, options: AddConstraintOptions): Promise<void>;
    removeConstraint(tableName: TableNameOrModel, constraintName: string, options?: RemoveConstraintOptions): Promise<void>;
    showConstraints(tableName: TableNameOrModel, options?: ShowConstraintsOptions): Promise<ConstraintDescription[]>;
    /**
     * A wrapper that fixes SQLite's inability to remove columns from existing tables.
     * It will create a backup of the table, drop the table afterwards and create a
     * new table with the same name but without the obsolete column.
     *
     * @param tableName
     * @param removeColumn
     * @param options
     */
    removeColumn(tableName: TableNameOrModel, removeColumn: string, options?: RemoveColumnOptions): Promise<void>;
    /**
     * A wrapper that fixes SQLite's inability to change columns from existing tables.
     * It will create a backup of the table, drop the table afterwards and create a
     * new table with the same name but with a modified version of the respective column.
     *
     * @param tableName
     * @param columnName
     * @param dataTypeOrOptions
     * @param options
     */
    changeColumn(tableName: TableNameOrModel, columnName: string, dataTypeOrOptions: DataType | AttributeOptions, options?: QueryRawOptions): Promise<void>;
    /**
     * A wrapper that fixes SQLite's inability to rename columns from existing tables.
     * It will create a backup of the table, drop the table afterwards and create a
     * new table with the same name but with a renamed version of the respective column.
     *
     * @param tableName
     * @param attrNameBefore
     * @param attrNameAfter
     * @param options
     */
    renameColumn(tableName: TableNameOrModel, attrNameBefore: string, attrNameAfter: string, options?: QueryRawOptions): Promise<void>;
}
