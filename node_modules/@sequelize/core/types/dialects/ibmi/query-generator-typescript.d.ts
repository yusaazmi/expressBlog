import { AbstractQueryGenerator } from '../abstract/query-generator';
import type { RemoveIndexQueryOptions, TableNameOrModel } from '../abstract/query-generator-typescript';
import type { ListSchemasQueryOptions, ListTablesQueryOptions, RenameTableQueryOptions, ShowConstraintsQueryOptions, TruncateTableQueryOptions } from '../abstract/query-generator.types';
import { IBMiQueryGeneratorInternal } from './query-generator-internal.js';
import type { IBMiDialect } from './index.js';
/**
 * Temporary class to ease the TypeScript migration
 */
export declare class IBMiQueryGeneratorTypeScript extends AbstractQueryGenerator {
    #private;
    constructor(dialect: IBMiDialect, internals?: IBMiQueryGeneratorInternal);
    listSchemasQuery(options?: ListSchemasQueryOptions): string;
    describeTableQuery(tableName: TableNameOrModel): string;
    listTablesQuery(options?: ListTablesQueryOptions): string;
    renameTableQuery(beforeTableName: TableNameOrModel, afterTableName: TableNameOrModel, options?: RenameTableQueryOptions): string;
    truncateTableQuery(tableName: TableNameOrModel, options?: TruncateTableQueryOptions): string;
    showConstraintsQuery(tableName: TableNameOrModel, options?: ShowConstraintsQueryOptions): string;
    showIndexesQuery(tableName: TableNameOrModel): string;
    removeIndexQuery(tableName: TableNameOrModel, indexNameOrAttributes: string | string[], options?: RemoveIndexQueryOptions): string;
    versionQuery(): string;
    tableExistsQuery(tableName: TableNameOrModel): string;
}
